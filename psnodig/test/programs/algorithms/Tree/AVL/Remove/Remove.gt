struct Tree {
    value int,
    height int,
    left Tree,
    right Tree
}

func Remove(root Tree, x int) {
    if root == nil {
        return nil
    }

    if (root.value) > x {
        root.left := Remove(root.left, x)
    }
    else if (root.value) < x {
        root.right := Remove(root.right, x)
    }
    else if (root.left) == nil {
        return root.right
    }
    else if (root.right) == nil {
        return root.left
    }
    else {
        grande := FindMax(root.left)
        root.value := grande.value
        root.left := Remove(root.left, grande.value)
    }

    root.height := Height(root)
    return Balance(root)
}

func FindMax(root Tree) {
    if root == nil {
        return nil
    }

    if (root.right) == nil {
        return root
    }

    return FindMax(root.right)
}

func Height(root Tree) {
    if root == nil {
        return -1
    }
    return 1 + max(Height(root.left), Height(root.right))
}

func Balance(root Tree) {
    if BalanceFactor(root) < -1 {
        if BalanceFactor(root.right) > 0 {
            root.right := RightRotate(root.right)
        }
        return LeftRotate(root)
    }
    if BalanceFactor(root) > 1 {
        if BalanceFactor(root.left) < 0 {
            root.left := LeftRotate(root.left)
        }
        return RightRotate(root)
    }
    return root
}

func BalanceFactor(root Tree) {
    if root == nil {
        return 0
    }
    return Height(root.left) - Height(root.right)
}

func LeftRotate(root Tree) {
    newroot := root.right
    tmp := newroot.left

    root.right := tmp
    root.height := Height(root)

    newroot.left := root
    newroot.height := Height(newroot)

    return newroot
}

func RightRotate(root Tree) {
    newroot := root.left
    tmp := newroot.right

    root.left := tmp
    root.height := Height(root)

    newroot.right := root
    newroot.height := Height(newroot)

    return newroot
}

func f() {
    t := struct Tree(4, 2, struct Tree(2, 1, struct Tree(1, 0, nil, nil), struct Tree(3, 0, nil, nil)), struct Tree(5, 1, nil, struct Tree(6, 0, nil, nil)))
    print(t)

    print("-----")
    k := Remove(t, 4)
    print(k)

    return 1
}

f()