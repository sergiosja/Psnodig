/*
func f(x boolean1, y boolean) {
    cond := x && y
    if cond {
        return 1
    }
    return -1
}

func f(a list) {
    @{ swap two first elements of a }{
        tmp := a[0]
        a[0] := a[1]
        a[1] := tmp
    }
    return a
}

func main(){
    a := [1, 2, 3, 4]
    f(a)
    print(a)
    return 1
}

func f(a int){
    a[0] := 2
    a[1] := 1
    return 1
}

main()


func f() {
    hs := set{1, 2, 1}
    add(2, hs)
    print(hs)

    hm := map{"1": 1, "2": 2}
    add("3", 3, hm)
    get("3", hm)
    print(hm)
}

f()

func f(x int) {
    a := 0
    if x > 30 {
        a := x + a
        print("Congrats!")
        print("I'm proud of you")
    } else if x > 20 {
        a := x - a
    }
    return a
}

struct Tree {
    value int,
    left Tree,
    right Tree
}

func Remove(t Tree, val int) {
    if t == nil {
        return nil
    }
    else if (t.value) < val {
        t.right := Remove(t.right, val)
        return t
    }
    else if (t.value) > val {
        t.left := Remove(t.left, val)
        return t
    }

    if (t.left) == nil {
        return t.right
    }
    else if (t.right) == nil {
        return t.left
    }

    nodex := FindMax(t.left)
    t.value := nodex.value
    t.left := Remove(t.left, t.value)
    return t
}

func FindMin(root Tree) {
    if (root.left) == nil {
        return (root.value)
    }

    return FindMin(root.left)
}

? A list $A$ of integers with n elements?
! A with values ordered from smallest to largest!

func BucketSort(A list) {
    # N := length(A)

    @{B $\gets$ Array of N empty lists}{
        B := []
        for i := 0, N {
            append([], B)
        }
    }

    # n := length(A)
    for i := 0, n - 1 {
        @{associate k with A[i]}{
            k := floor(A[i] / 10)
        }
        append(A[i], B[k])
    }
    //@{}{}

    for i := 0, length(B) - 1 {
        B[i] := InsertionSort(B[i])
    }
    //@{}{}

    j := 0
    for k := 0, N {
        for x := B[k] {
            A[j] := x
            j := j + 1
        }
    }

    return A
}

func InsertionSort(A list) {
    # n := length(A)
    if n < 2 {
        return A
    }

    for i := 1, n - 1 {
        j := i
        while (j > 0) && (A[j-1] > A[j]) {
            @{swap(A[j], A[j-1])}{
                tmp := A[j]
                A[j] := A[j-1]
                A[j-1] := tmp
            }
            j := j - 1
        }
    }
    return A
}

func f() {
    b := [64, 25, 12, 22, 11, 90, 77, 55, 44]
    print(b)
    b := BucketSort(b)
    print(b)
    return 1
}

f()

? A set of nodes, a stack of nodes, a graph and a starting node?
! The set of visited nodes!

func DFS(visited list, stack list, graph list, node int) {
    add(node, visited)
    append(node, stack)
    while length(stack) > 0 {
        m := pop(stack)
        for nb := get(m, graph) {
            if not in(nb, visited) {
                add(nb, visited)
                append(nb, stack)
            }
        }
    }
    return visited
}

func f() {
    emp := set{}
    print(DFS(emp, [], map{1: [0, 2, 3], 2: [0], 0: [1], 3: [1, 2, 3, 4, 5]}, 1))
}

f()

func BinarySearch(A list, x int) {
    low := 0
    high := length(A) - 1

    while low <= high {
        i := floor((low + high) / 2)

        if A[i] == x {
            return true
        }
        else if A[i] > x {
            high := i - 1
        }
        else {
            low := i + 1
        }
    }
    return false
}

BinarySearch([1, 2, 3, 4, 5], 3)

func Search(A list, x int) {
    for i := A {
        if i == x {
            return true
        }
    }
    return false
}

? a list of n elements?
! n!

func f(a list) {
    # n := length(a)
    return n
}

*/


func f(x boolea, y bool) {
    cond := x && y
    if not cond {
        print("True")
    }
    print("False")
    return cond
}

f(true, false)